<script type="text/javascript" src="/javascripts/utility/nested_fields.js"></script>
<script type="text/javascript" src="/javascripts/utility/collapse-panel2.js"></script>
<script type="text/javascript" src="/javascripts/utility/validate-form.js"></script>
<script type="text/javascript" src="/javascripts/utility/delete.js"></script>
<script type="text/javascript" src="/javascripts/utility/bootstrap-datepicker.js"></script>
<script type="text/javascript" src="/javascripts/utility/format-builder.js"></script>
<script type="text/javascript" src="/javascripts/utility/timezone-control.js"></script>
<script type="text/javascript" src="/javascripts/utility/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="/javascripts/utility/dataTables.bootstrap.min.js"></script>
<script type="text/javascript" src="/javascripts/utility/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="/javascripts/utility/employee_select.js"></script>
<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>
<link rel="stylesheet" type="text/css" href="/stylesheets/bootstrap/dataTables.bootstrap.min.css"/>
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">

<%if CONFIG::GENERAL[:has_gmap].present?%>
  <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDRNvISiW_CO6FTNCdV40Nh19rAncpeLJo"></script>
  <%=render 'shared/load_gmap'%>
  <div hidden id="map-container">
    <div id="map-canvas" style="height:500px;"></div>
  </div>
<%end%>

<%if @template.js_link.present?%>
  <script type="text/javascript" src="/javascripts/templates/<%=@template.js_link%>"></script>
<%end%>

<div class="item active mt50 ignore_validation" style="height:auto;">
  <div class="grid per90 center-block">
    <div class="panel panel-warning">
      <div class="panel-heading">
        <div class="panel-title">
          <div class="top_text">
            <%=@action.titleize + " " + @record.template.name + " " + @action != "new" ? (@record.confidential? ? "(Confidential)" : '') : ''%>
          </div>
          <div class="top_buttons pull-right">
            <a class="btn btn-default expandall mb5"
              data-toggle="tooltip"
              data-placement="top"
              title="Expand all panels">
              Expand All
            </a>
          </div>
        </div>
      </div>


      <div class="modal fade bs-example-modal-lg emp_modal"
        tabindex="-1"
        role="dialog"
        aria-labelledby="myLargeModalLabel">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <%=render 'records/emp'%>
          </div>
        </div>
      </div>

      <div class="modal fade bs-example-modal-lg airport_modal"
        tabindex="-1"
        role="dialog"
        aria-labelledby="myLargeModalLabel">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <%=render 'airports_select'%>
          </div>
        </div>
      </div>


      <div class="panel-body" id="form_body">

        <%=form_for @record ,:html => {:multipart => true} do |f|%>

          <%=f.hidden_field :templates_id, :value => @template.id%>
          <%if @action == "new"%>
            <%=f.hidden_field :users_id, :value => current_user.id%>
          <%end%>

          <div class="col-xs-12 mt20">
            <div class="col-xs-12 col-sm-2 mb5">
              <%=label_tag :submitted_by, "Submitted By"%>
              <%#integrate @record.get_user_id in the future?%>
              <%submitter_display = @record.anonymous? ? 'Anonymous' : @record.created_by.full_name%>
              <input type="text"
                readonly class="form-control"
                value='<%=@action == "new" ? current_user.full_name : submitter_display%>'>
            </div>

            <%if CONFIG.sr::GENERAL[:submission_description]%>
              <div class="col-xs-12 col-sm-4 mb5">
                <%=label_tag :description, "Event Title"%>
                <%=f.text_field :description,
                  {:class=>'form-control',
                  :maxlength => "30",
                  :placeholder => "please limit to 30 characters"}%>
              </div>
            <%end%>


            <%event_time_zone = @record.event_time_zone%>

            <div class="col-xs-12 col-sm-6 col-md-3 col-lg-2 col-xl-2">
              <%=label_tag :event_date, "Date and Time of Event", :style=>"color:red"%>
              <%event_date = @record.event_date%>
              <%if CONFIG.sr::GENERAL[:submission_time_zone]%>
                <%event_date = event_date.in_time_zone(event_time_zone) if event_time_zone.present?%>
              <%end%>
              <%=f.text_field :event_date,
              {:class=>'field-datetime form-control required_field', value: event_date, :id=>"event_date", 'data-format' => CONFIG.getTimeFormat[:datetimepicker]}%>
            </div>

            <div class="col-xs-12 col-sm-2 mb5">
              <%=label_tag :event_time_zone, "Time Zone", style: 'color:red'%>
              <%if CONFIG.sr::GENERAL[:submission_time_zone]%>
                <div class="input-group">
                  <%=f.select :event_time_zone,
                     ActiveSupport::TimeZone.all.map(&:name),
                    {selected: event_time_zone},
                    {:class => 'form-control tz atz toplevel_timezone required_field'}%>
                  <span class="input-group-addon tc">All</span>
                </div>
              <%else%>
                <%=f.hidden_field :event_time_zone, :value => event_time_zone%>
                <button id="time-zone-toggle-btn" type="button" class="input-group btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off">
                  <%=event_time_zone%>
                </button>
              <%end%>
            </div>
          </div>

          <div class="col-xs-12 mt20">



            <%@categories.order(:category_order).each do |category|%>
              <%@cat = category%>
              <%if @cat.id == 338%>
                <%= render 'observation_phases_fields', f: f%>
              <%else%>
                <%= render 'category_fields', f: f%>
              <%end%>
            <%end%>

            <%=render '/forms/attachments_form', f: f, owner: @record%>

            <div class="mt10 mr10">
              <%= f.submit "#{action_name == 'new' ? 'Submit' : 'Update'}",
                :class => "btn btn-success pull-right mr20",
                :disable_with => "Saving..."%>
              <%=link_to "Cancel",
                @action == "new" ? new_record_path : record_path(@record),
                :id => "cancel-btn",
                :class => "mr5 btn btn-default pull-right",
                :confirm => 'Are you sure?'%>
            </div>
          </div>

        <%end%>
      </div>
    </div>
  </div>
</div>


<script type="text/javascript">

  var airport_table;

  var map,
      mapTypes = {},
      pointsHolder = {},
      mapSettings = {},
      markers = [],
      centerLat = <%=CONFIG::GENERAL[:lat]%>,
      centerLng = <%=CONFIG::GENERAL[:lng]%>,
      mapZoom = <%=CONFIG::GENERAL[:gMapZoom]%>,
      clicked_map_field_id;

  $(document).ready(function(){
    timeZoneToggleBtn = document.querySelector('#time-zone-toggle-btn')
    if (timeZoneToggleBtn != null) {
      $('#time-zone-toggle-btn').on('click', function() {
        if (timeZoneToggleBtn.innerHTML == 'Local') {
          timeZoneToggleBtn.innerHTML = 'UTC'
          $('#record_event_time_zone').val('UTC')
        } else {
          timeZoneToggleBtn.innerHTML = 'Local'
          $('#record_event_time_zone').val('Local')
        }
      })
    }

    // Get listing of all the airport buttons
    var field_id;
    $(this).find(".airport_button").each(function(index, item){
      // Get the button that's being clicked
      $(item).on("click", function(){
        // Get the selected airport's field id
        field_id = $(this).prop("id");
        resetModal(field_id);
        $("#search_btn").html('<button class="btn btn-info" id="search_btn_' + field_id + '">Search</button>');
        $("#search_btn_"+field_id).on("click", {field_id: field_id}, handleSearch);
      });
    });


    $('.required_field').each(function(){
      if ($(this).parents('.nested_field').css('display') != 'none'){
        update_titles($(this));
      }
    });

    $(this).find(".map_button").each(function(index, item) {
      $(item).on('click', function(){
        clicked_map_field_id = $(this).prop("id");
        swal ({
          title: "Add or Remove Map Marker for Map field",
          allowOutsideClick: false,
          showCancelButton: false,
          html: '<p id="loading">Loading...</p>',
          onOpen: function() {
            $('#map-canvas').appendTo('.swal2-content');
            updateMarkers(clicked_map_field_id);
            $('.swal2-content #loading').remove();
          },
          onClose: function() {
            $('#map-canvas').appendTo('#map-container');
            cnt = count_visible_markers_for_field(clicked_map_field_id);
            if (cnt > 0) {
              if (cnt > 1) {
                str = cnt + " points marked"
              } else {
                str = "1 point marked"
              }

              $("#map" + clicked_map_field_id).val(str);
              $("#map-select" + clicked_map_field_id).val(str);
            } else {
              $("#map" + clicked_map_field_id).val("");
              $("#map-select" + clicked_map_field_id).val("");
            }
          }
        }).catch(swal.noop);
      });

    });

  });

  // Updata airport table
  function handleSearch(event){
    // Get field id
    var field_id = event.data.field_id
    // Get the icao code user searched for
    var icao = $("#icao").val();
    var iata = $("#iata").val();
    var arpt_name = $("#arpt_name").val();
    // Do nothing if nothing is searched
    if(icao == "" && iata == "" && arpt_name ==""){
    // Update the table if icao code is not empty
    }else{
      // Get the data from server
      $.get('<%=airport_data_records_path%>?field_id=' + field_id + '&icao=' + icao + "&iata=" + iata + "&arpt_name=" + arpt_name, function(data){
        // Render airport table with data
        $("#airports_table").html(data);
        updateAirportTable(field_id);
      });
    }
  }

  function updateAirportTable(field_id){
    // Initialize table as a datatable
    airport_table = $('#airports' + field_id).DataTable({
      "aLengthMenu": [[5, 10, 15, -1], [5, 10, 15, "All"]],
      "iDisplayLength": 5
    });
    // User clicked on a row
    $("body").on("click", "#airports" + field_id + " tbody tr", function(){
      // Get the row information
      var icao = $(this).find("td").eq(0).text();
      var iata = $(this).find("td").eq(1).text();
      // Set the value on the form
      $("#airport" + field_id).val(icao + ";" + iata);
      $("#airport-select" + field_id).val(icao + ";" + iata);
      resetModal(field_id);
    });
  }

  function resetModal(field_id){
    // Reset the table, field, and close the modal
    $("#airports_table").html("");
    $("#icao").val("");
    $("#iata").val("");
    $("#arpt_name").val("");
    $('#airport_div').hide();
    $(".airport_modal").modal("hide");
  }

  function update_titles(target){
    $(target).closest('div.category-panel').find('.panel-title').css("color", "red");
    $(target).closest('div.category-panel').find('.panel-title').value = "*" ;
  }

  function updateMarkers(id) {
    if(map == null) {
      markers = [];
      mapTypes = {};
      pointsHolder = {};
      read_form_points(id);
      initialize();
    }
  }

  function read_form_points(id) {
    action = "<%=@action%>";
    $('.pin-container').each(function(){
      if ($(this).closest("#pin-holder").attr("name") == id) {
        if($(this).hasClass("unsaved")) {
          if ($(this).find(".pin-lat").val()){
            var mark = {id:$(this).attr("data-id"), map_type:$(this).find(".pin-map-type").val(), lat:$(this).find(".pin-lat").val(), lng:$(this).find(".pin-lng").val()};
            markers.push(mark);
          }
        } else {
          if (action != "new") {
            if($(this).find(".pin-destroy").val() == "false"){
              if ($(this).find(".pin-lat").val()){
                var mark = {id:$(this).attr("data-id"), map_type:$(this).find(".pin-map-type").val(), lat:$(this).find(".pin-lat").val(), lng:$(this).find(".pin-lng").val()};
                markers.push(mark);
              }
            }
          }
        }
      }
    });
  }

  function count_visible_markers_for_field(id) {
    action = "<%=@action%>";
    count = 0;
    $('.pin-container').each(function(){
      if ($(this).closest("#pin-holder").attr("name") == id) {
        if($(this).hasClass("unsaved")) {
          if ($(this).find(".pin-lat").val()){
            count ++;
          }
        } else {
          if (action != "new") {
            if($(this).find(".pin-destroy").val() == "false"){
              if ($(this).find(".pin-lat").val()){
                count ++;
              }
            }
          }
        }
      }
    });
    return count;
  }

  function remove_placeholder_point_html() {
    $('.pin-container.unsaved').each(function(){
      if($(this).find(".pin-lat").val() == ""){
        $(this).remove();
      }
    });
  }

  function initialize() {
    mapSettings[google.maps.MapTypeId.SATELLITE] = {
      center: new google.maps.LatLng(parseFloat(centerLat), parseFloat(centerLng)),
      zoom: mapZoom
    };

    var mapOptions = {
      zoom: mapZoom,
      center: new google.maps.LatLng(centerLat, centerLng),
      mapTypeId: google.maps.MapTypeId.SATELLITE,
      keyboardShortcuts: false,
      scrollwheel: false,
      disableDoubleClickZoom: false,
      zoomControl: true,
      streetViewControl: false,
      disableDefaultUI: false,
      minZoom: mapZoom
    };

    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    map.setTilt(0);

    google.maps.event.addListener(map, 'click', function(event){
      var id = moment().valueOf(); // get new id

      var marker = new google.maps.Marker({
        id: id,
        position: event.latLng,
        map: map,
        mapType: map.getMapTypeId(),
      });

      pointsHolder[id] = marker;

      var newPinContainer = $('#pin-template[name="'+clicked_map_field_id+'"]').html().replace(/\[points\_attributes\]\[\d+\]/g, '[points_attributes]['+id+']')
      $('#pin-holder[name="'+clicked_map_field_id+'"]').append(newPinContainer);
      $('#pin-holder[name="'+clicked_map_field_id+'"] .pin-container:last').attr('data-id', id);
      $('#pin-holder[name="'+clicked_map_field_id+'"] .pin-container:last .pin-lat').val(event.latLng.lat());
      $('#pin-holder[name="'+clicked_map_field_id+'"] .pin-container:last .pin-lng').val(event.latLng.lng());
      $('#pin-holder[name="'+clicked_map_field_id+'"] .pin-container:last .pin-map-type').val(map.getMapTypeId());

      marker.addListener('click', function(){
        delMarker(this.id);
      })
    });

    // Draw existing pins
    if (markers.length > 0) {
      for(var i = 0, len = markers.length; i < len; i++){
        if (i == 0) {
          map.setMapTypeId(markers[i].map_type);
        }

        console.log("Existing Marker ID: " + markers[i].id);

        var marker = new google.maps.Marker({
          id: markers[i].id,
          position: new google.maps.LatLng(markers[i].lat, markers[i].lng),
          map: map,
          mapType: markers[i].map_type,
          visible: markers[i].map_type === map.getMapTypeId(),
        });

        pointsHolder[markers[i].id] = marker;

        marker.addListener('click', function(){
          delMarker(this.id);
        });
      }
    }
  }

  function setMapType(mapType) {
    map.setZoom(mapSettings[mapType].zoom);
    map.setCenter(mapSettings[mapType].center);

    for (var id in pointsHolder) {
      pointsHolder[id].setVisible(pointsHolder[id].mapType === mapType);
    }
  }

  function delMarker(id) {
    console.log("Deleting Marker ID: " + id);
    var pinContainer = $('#pin-holder[name="'+clicked_map_field_id+'"] .pin-container[data-id="'+id+'"]');

    var pinDestroy = $('.pin-destroy', pinContainer)
    if (pinContainer.hasClass("unsaved"))
      pinContainer.remove();
    else
      pinDestroy.val(1);

    marker = pointsHolder[id];
    marker.setMap(null);
    delete pointsHolder[id];
  }

</script>



<style type="text/css">
  .tc {
    cursor: pointer;
  }
  .checkbox,
  .radio{
    cursor: pointer;
    margin-top: 2px;
    margin-bottom: 2px;
  }
  .checkbox:hover {
    font-weight:bold;
  }
  .radio:hover {
    font-weight:bold;
  }
</style>
