= javascript_include_tag \
  'utility/nested_fields',
  'utility/checklist-control',
  'utility/dirty-form'


= form_for @record, html: {id: 'submit-form', class: 'dirty-submit', multipart: true} do |f|

  .col-xs-12
    .panel.panel-warning
      .panel-heading
        .panel-title
          = "#{action_name.titleize} Checklist"
          = link_to "<span class='glyphicon glyphicon-remove'></span>".html_safe,
            '#', class: 'close pull-right',
            "data-dismiss" => "modal",
            "aria-label" => "Close",
            "data-backdrop" => "static",
            "data-keyboard" => "false"

      .panel-body style="max-height: calc(100vh - 210px);overflow-y:auto"
        .col-xs-12

          - if action_name == 'edit'

            .col-xs-12.form-group.mb10
              .col-xs-2.mt5
                = f.label :title, 'Checklist Name', class: 'pull-right'
              .col-xs-8
                = f.text_field :title, class: 'form-control pull-left'

            - if @record.owner_type != 'ChecklistHeader'
              .col-xs-12.form-group.mb10
                .col-xs-2.mt5
                  = f.label :assignee_ids, 'Assignees', class: 'pull-right'
                .col-xs-8
                  = f.hidden_field :assignee_ids
                  = text_field_tag :assignee_names, '', class: 'form-control pull-left json-user-tags', id: 'assignee_names'

            .col-xs-12.form-group.mb10
              .col-xs-2.mt5
                = f.label :table_view, 'Table View', class: 'pull-right'
              .col-xs-8.mt5
                = f.check_box :table_view

            = render '/checklists/edit_instructions'

          - if action_name == 'edit' || @record.table_view
            table class='table table-bordered table-striped mt10' id="table-view-#{@record.id}"
              thead
                tr
                  - @record.checklist_header.checklist_header_items.each do |item|
                    th width="#{item.size}%" = item.title
                  - if action_name == 'edit'
                    th Actions
                  - else
                    th Attachments
              tbody.checklist_rows#checklist_rows
                - @record.checklist_rows.each do |checklist_row|
                  = f.fields_for :checklist_rows, checklist_row do |row_form|
                    = render 'checklist_row_fields', checklist_row: checklist_row, f: row_form, source: 'Existing'

            - if action_name == 'edit'
              = link_to_add_fields 'Add a Row', f, :checklist_rows, {checklist_header: @record.checklist_header}, partial: 'checklist_row_fields'
          - else # Page View
            table class='table table-bordered table-striped mt10' id="page-view-update-#{@record.id}"
              thead
                th = "Page View"
              tbody
                - @record.checklist_rows.each do |checklist_row|
                  - is_header = (defined? checklist_row) && checklist_row.is_header || false
                  = f.fields_for :checklist_rows, checklist_row do |row_form|
                    tr
                      td
                        table class='table table-bordered table-striped mt10'
                          thead
                            = row_form.hidden_field :id
                            th = "Header"
                            th = "Content"
                          tbody.checklist_rows
                            - checklist_row.checklist_cells.each do |checklist_cell|
                              tr
                                = row_form.fields_for :checklist_cells, checklist_cell do |cell_form|
                                  - header_item = checklist_cell.checklist_header_item
                                  td
                                    b = header_item.title
                                  = render 'checklist_row_fields_td',
                                    :source => 'Existing',
                                    :header_item => header_item,
                                    :checklist_cell => checklist_cell,
                                    :f => cell_form
                            - if action_name != 'edit'
                              td
                                b Attachments
                              td
                                - unless is_header
                                  = render 'forms/attachments_show_mini', owner: checklist_row, edit: true, f: row_form

          .mr10.mt10
            = f.submit 'Save', class: 'btn btn-success pull-right', disable_with: 'Saving...'

css:
  .bootstrap-tagsinput {
    padding: 6px 12px;
  }

script src="/plugins/forms/bootstrap-tagsinput/bootstrap-tagsinput.js"
script src="/js/libs/typeahead.bundle.js"

javascript:
  $(function(){
    $("#table-view-#{@record.id}").DataTable({
      /* Disable initial sort */
      "order": [],
      autoWidth: false,
    })

    /* Disable sort buttons (table headers) */
    $("#table-view-#{@record.id}").find("th").off("click")

    var table = $("#page-view-update-#{@record.id}").DataTable({
      "aaSorting": [],
      "aLengthMenu": [[1, -1], [1, "All"]],
      "iDisplayLength": -1,
    })

    $('#submit-form').on('submit', function (e) {
      e.preventDefault();
      var $form = $(this);
      // console.log($form)
       // Iterate over all checkboxes in the table
       table.$('input[type="checkbox"]').each(function(){
          // If checkbox doesn't exist in DOM
          if(!$.contains(document, this)){
             // If checkbox is checked
             if(this.checked){
                // Create a hidden element
                $form.append(
                   $('<input>')
                      .attr('type', 'hidden')
                      .attr('name', this.name)
                      .val(this.value)
                );
             }
          }
       });
    })

    var users = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace('full_name'),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      identify: function(obj) { console.log(obj); return obj.full_name;},
      prefetch: {
        url: '/users/user_json_request',
        filter: function(users) {
          return $.map(users, function(user) {
            return {
              full_name: user.full_name,
              id: user.id
            };
          });
        }
      }
    });
    users.clearPrefetchCache();
    users.initialize();
    $('.json-user-tags').tagsinput({
      freeInput: false,
      itemValue: 'id',
      itemText: 'full_name',
      typeaheadjs: {
        name: 'users',
        displayKey: 'full_name',
        source: users.ttAdapter()
      }
    });

    // UPDATE ASSIGNEE LIST
    $('.json-user-tags').on('itemAdded itemRemoved', function(event){
      item_arr = $(this).tagsinput('items');
      hiddenField = $("#checklist_assignee_ids");
      if (!(typeof event.item === "undefined")) {
        id_arr = [];
        jQuery.each(item_arr, function(index, item) {
          id_arr.push(item.id);
        });
        hiddenField.val(id_arr.toString());
      }
    });
  });

// DISPLAY EXISTING ASSIGNEES
- assignees = @record.assignees
- assignees.each do |assignee|
  javascript:
    $('#assignee_names').tagsinput('add', {"full_name": "#{assignee.full_name}", "id": parseInt("#{assignee.id}")});



