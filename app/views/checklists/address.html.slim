= javascript_include_tag \
  'utility/jquery.dataTables.min',
  'utility/dataTables.bootstrap.min',
  'utility/dataTables.buttons.min',
  'utility/nested_fields',
  'utility/checklist-control',
  'utility/dirty-form',
  'utility/format-builder'

.modal.fade.emp_modal
  tabindex="-1"
  role="dialog"
  aria-labelledby="myLargeModalLabel"
  .modal-dialog.modal-lg
    role="document"
    .modal-content
      =render '/submissions/emp'

.modal.fade.airport_modal
  tabindex="-1"
  role="dialog"
  aria-labelledby="myLargeModalLabel"
  .modal-dialog.modal-lg
    role="document"
    .modal-content
      =render '/submissions/airports_select'

= form_for @record, html: {id: 'submit-form', class: 'dirty-submit', multipart: true} do |f|

  .item.active.mt50
    .grid.per90.center-block
      .col-xs-12
        .panel.panel-warning
          .panel-heading
            .panel-title
              = "#{action_name.titleize} Checklist"
              h5.pull-right#auto-save style="visibility: hidden;" = "Auto Save enabled"

          .panel-body style="height: calc(85vh - 210px);overflow-y:auto"
            .col-xs-12
              - if @record.table_view
                table class='table table-bordered table-striped mt10' id="table-view-#{@record.id}"
                  thead
                    tr
                      - @record.checklist_header.checklist_header_items.each do |item|
                        th width="#{item.size}%" = item.title
                      th Attachments
                  tbody.checklist_rows#checklist_rows
                    - @record.checklist_rows.each do |checklist_row|
                      = f.fields_for :checklist_rows, checklist_row do |row_form|
                        = render 'checklist_row_fields', checklist_row: checklist_row, f: row_form, source: 'Existing'
              - else # Page View
                = f.hidden_field :page_view_checklist, class: 'changed', value: ''
                table class='table table-bordered table-striped mt10' id="page-view-update-#{@record.id}"
                  thead
                    th = "Page View"
                  tbody

          = f.submit 'Save', class: 'btn btn-success pull-right mt20 mb20', disable_with: 'Saving...'

css:
  .bootstrap-tagsinput {
    padding: 6px 12px;
  }
  .changed {
    box-shadow: 0px 0px 7px orange;
  }

  .attachment-item {
    border: 1px solid silver;
    border-radius: 3px;
    padding: 10px;
    background-color: #e8e8e8;
  }
  .tooltip-inner {
    max-width: 100% !important;
  }
  .attachment-thumbnail {
    background-color: white;
    padding: 5px;
    border-radius: 3px;
    border: 1px solid silver;
  }

script src="/plugins/forms/bootstrap-tagsinput/bootstrap-tagsinput.js"
script src="/js/libs/typeahead.bundle.js"

javascript:
  $(function(){
    // employ selector
    var employee_table;

    function build_user_table(){
      employee_table = $('#users').DataTable({
        "aLengthMenu": [[5, 10, 15, -1], [5, 10, 15, "All"]],
        "iDisplayLength": 5
      });
    }

    function clear_user_table(){
      employee_table.destroy();
    }

    $(window).resize();
    build_user_table();

    $(this).find(".emp_button").each(function(index, item){
      $(item).on("click", function(){
        var field_id = $(this).prop('id');
        $(".emp_modal").show();
        clear_user_table();
        $("#users tbody tr").unbind();
        // $(".close").unbind();
        $("#users tbody tr").on("click", function(){
          $(item).parent().parent().find("#emp" + field_id).val($(this).find("td").eq(1).text());
          $(item).parent().parent().find("#employee-select"+field_id).val($(this).find("td").eq(0).text());
          $('#emp_div').hide();
          $('.emp_modal').modal('toggle');
        });
        $('.close').on('click',function(){
          $(item).parent().parent().find("#emp"+field_id).val("");
          $(item).parent().parent().find("#employee-select"+field_id).val("");
          $('#emp_div').hide();
        });
        build_user_table();
      });
    });


    // airport selector
    var airport_table;

    function handleSearch(event) {
      // Get field id
      var field_id = event.data.field_id
      // Get the keywords user searched for
      var icao = $("#icao").val();
      var iata = $("#iata").val();
      var arpt_name = $("#arpt_name").val();

      // Do nothing if nothing is searched
      if(icao == "" && iata == "" && arpt_name ==""){
      // Update the table if icao code is not empty
      }else{
        // Get the data from server
        $.get("#{airport_data_submissions_path}?field_id=" + field_id + '&icao=' + icao + "&iata=" + iata + "&arpt_name=" + arpt_name, function(data){
          // Render airport table with data
          $("#airports_table").html(data);
          updateAirportTable(field_id);
        });
      }
    }

    function resetModal(field_id) {
      // Reset the table, field, and close the modal
      $("#airports_table").html("");
      $("#icao").val("");
      $("#iata").val("");
      $("#arpt_name").val("");
      $('#airport_div').hide();
      $(".airport_modal").modal("hide");
    }

    function updateAirportTable(field_id) {
      // Initialize table as a datatable
      airport_table = $('#airports' + field_id).DataTable({
        "aLengthMenu": [[5, 10, 15, -1], [5, 10, 15, "All"]],
        "iDisplayLength": 5
      });
      // User clicked on a row
      $("body").on("click", "#airports" + field_id + " tbody tr", function(){
        // Get the row information
        var icao = $(this).find("td").eq(0).text();
        var iata = $(this).find("td").eq(1).text();

        var target = $("#airport" + field_id)[0];
        target_page = target.dataset.page;
        target_row = target.dataset.row;

        if (checklistData[target_page] != null) {
          selected_data = checklistData[target_page].find(element => element['id'] == target_row);
          selected_data['value'] = icao + ";" + iata;

          checklistNewData[target_page] = checklistNewData[target_page] || [];
          target_id = checklistNewData[target_page].findIndex(element => element['id'] == target_row);
          if (target_id != -1) {
            checklistNewData[target_page][target_id] = selected_data;
          } else {
            checklistNewData[target_page].push(selected_data);
          }
        }

        // Set the value on the form
        $("#airport" + field_id).val(icao + ";" + iata);
        $("#airport-select" + field_id).val(icao + ";" + iata);
        resetModal(field_id);
      });
    }

    // Get listing of all the airport buttons
    var field_id;
    $(this).find(".airport_button").each(function(index, item){
      // Get the button that's being clicked
      $(item).on("click", function(){
        // Get the selected airport's field id
        field_id = $(this).prop("id");
        resetModal(field_id);
        $("#search_btn").html('<button class="btn btn-info" id="search_btn_' + field_id + '">Search</button>');
        $("#search_btn_"+field_id).on("click", {field_id: field_id}, handleSearch);
      });
    });

    autoSaveText = document.getElementById('auto-save');

    $("#table-view-#{@record.id}").DataTable({
      "paging":   false,
      /* Disable initial sort */
      "order": [],
      autoWidth: false,
    })

    /* Disable sort buttons (table headers) */
    $("#table-view-#{@record.id}").find("th").off("click")


    // ---- Page View DataTable
    var currentPage = 0;
    var checklistData = {};
    var checklistNewData = checklistNewData || {};

    $('#page-view-update-#{@record.id}').change(function(event) {
      var target = event.target;

      if (target.className.includes('checklist-input')) {
        target_page = target.dataset.page;
        target_row = target.dataset.row;

        selected_data = checklistData[target_page].find(element => element['id'] == target_row);

        if (selected_data['data_type'] == 'checkboxes') {
          if (target.checked) {
            selected_data['value'] += `;${target.value}`;

          }else {
            selected_data['value'] = selected_data['value'].replace(target.value, '');
          }
        } else {
          if (target.value != selected_data['value']) {
            selected_data['value'] = target.value;
          }
        }
        checklistNewData[target_page] = checklistNewData[target_page] || [];
        
        target_id = checklistNewData[target_page].findIndex(element => element['id'] == target_row);
        if (target_id != -1) {
          checklistNewData[target_page][target_id] = selected_data;
        } else {
          checklistNewData[target_page].push(selected_data);
        }
      }
    });

    var table = $("#page-view-update-#{@record.id}").DataTable({
      "bFilter": false,
      "aLengthMenu": [[1], [1]],
      "iDisplayLength": 1,
      preDrawCallback: function() {
        var api = this.api();
        var pageInfo = api.page.info();
        currentPage = pageInfo['page'];
      },
      ajax: {
        url: "get_dataset",
        method: "POST",
        data: {
          checklist_id: '#{@record.id}'
        },
        dataSrc: function ( json ) {
          checklistData = json.data;

          if (checklistNewData[currentPage] != undefined && checklistNewData[currentPage] != {}) {
            checklistNewData[currentPage].forEach( new_data => {
              index = checklistData[currentPage].findIndex(data => data['id'] == new_data['id']);
              if (index != -1) { checklistData[currentPage][index] = new_data; }
            });
          }
          return checklistData;
        }
      },
      drawCallback: drawChecklistRowInOnePage,
      serverSide: true,
    })

    function textInputField(data) {
      if (data['value'] == null) { data['value'] = ''; }
      return `
        <textarea class='form-control checklist-input' data-page='${currentPage}' data-row='${data['id']}' rows='4' placeholder='Enter Text'>`
          + data['value'] +
        `</textarea>
      `;
    }

    function dropdownInputField(data) {
      if (data['options'] === null) { data['options'] = ''; }
      var options = data['options'].split(";").map(function (option) {
        return (`
          <option value='${option}' ${ data['value'] == option ? 'selected' : '' }>
            ${option}
          </option>
        `);
      }).join(' ');

      return `
        <select class='form-control checklist-input' data-page='${currentPage}' data-row='${data['id']}'>
          <option></option>
          ${options}
        </select>
      `;
    }

    function radioInputField(data) {
      if (data['options'] === null) { data['options'] = ''; }
      var options = data['options'].split(";").map(function (option) {
        return (`
          <label class='radio radio-inline'>
            <input class='checklist-input' type='radio' value='${option}' ${ data['value'] == option ? 'checked="checked"' : '' } name='${data['id']}' data-page='${currentPage}' data-row='${data['id']}'>
            ${option}
          </label>
        `);
      }).join('<br>');
      
      return `
        <div class='col-xs-12 ml5'>
          ${options}
        </div>
      `;
    }

    function checkboxesInputField(data) {
      if (data['options'] === null) { data['options'] = ''; }
      if (data['value'] === null) { data['value'] = ''; }
      var options = data['options'].split(";").map(function (option) {
        return (`
          <label class='checkbox checkbox-inline'>
            <input class='checkbox checklist-input' type='checkbox' value='${option}' ${ data['value'].includes(option) ? 'checked="checked"' : '' } data-page='${currentPage}' data-row='${data['id']}'>
            ${option}
          </label>
        `);
      }).join('<br>');
      
      return `
        <div class='col-xs-12 ml5'>
          ${options}
        </div>
      `;
    }

    function employeeInputField(data) {
      if (data['name'] == null) {
        data['name'] = '';
        data['value'] = '';
      }
      return `
        <div class='input-group'>
          <input class='form-control ml5 emp' id='emp${data['id']}' readonly='readonly' type='text' value='${data['name']}' data-page='${currentPage}' data-row='${data['id']}' data-userid='${data['value']}'>

          <span class='input-group-btn'>
            <a id='${data['id']}' href='#' class='btn btn-info emp_button' data-target='.emp_modal' data-toggle='modal'>...</a>
          </span>
        </div>
      `;
    }

    function airportInputField(data) {
      return `
        <div class='input-group'>
          <input class='form-control ml5 airport' id='airport${data['id']}' readonly='readonly' type='text' value='${data['value']}' data-page='${currentPage}' data-row='${data['id']}'>

          <span class='input-group-btn'>
            <a id='${data['id']}' href='#' class='btn btn-info airport_button' data-target='.airport_modal' data-toggle='modal'>...</a>
          </span>
        </div>
      `;
    }

    function dateInputField(data) {
      return `
        <input class='field-date form-control input checklist-input' readonly='readonly' placeholder='' value='${data['value']}' data-page='${currentPage}' data-row='${data['id']}'>
      `;
    }

    function datetimeInputField(data) {
      return `
        <input class='field-datetime form-control input checklist-input' readonly='readonly' placeholder='' value='${data['value']}' data-page='${currentPage}' data-row='${data['id']}'>
      `;
    }

    function dropdownCustomInputField(data) {
      return ``;
    }

    function attachmentThumbnail(data) {
      attachments = ``;

      names    = data['name'];
      captions = data['options'];

      data['value'].forEach(function (value, index) {
        if (captions[index] === null) { captions[index] = ''; }
        attachments += `
          <div align='center' class='row attachment-item mb10'>
            <div class='attachment-thumbnail'>
              <a href='${names[index]["url"]}' target='_blank'>
                <img alt='${captions[index]}' class='img-responsive' src='${names[index]["url"]}' style='width:100%; height;50px;'>
              </a>
            </div>
            <p>
              <strong>${captions[index]}</strong>
            </p>
            <a href="#" class="btn btn-danger attachment-destroy">Delete</a>
          </div>
        `
      })

      return attachments;
    }

    function attachmentInputField(data) {
      return `
        <div class='col-xs-12' id='${data['id']}_attachments' style='max-width:200px;'>
          <div class='row'>

            <div id='${data['id']}_add_attachments'>
              ${attachmentThumbnail(data)}
            </div>

            <a class="btn btn-success center-block add_attachment_mini" href="#" onclick="add_fields(this, 'attachments', '<style type=\&quot;text/css\&quot;>.hidden-file-input {  width: 0.1px;  height: 0.1px;  opacity: 0;  overflow: hidden;  position: absolute;  z-index: -1;}<\/style><div align=\&quot;center\&quot; class=\&quot;to-delete attachment-item mb10\&quot;><input class=\&quot;hidden-file-input\&quot; id=\&quot;new_attachments\&quot; name=\&quot;checklist[checklist_rows_attributes][${data['id']}][attachments_attributes][new_attachments][name]\&quot; type=\&quot;file\&quot; /><label class=\&quot;mt10 btn btn-info\&quot; for=\&quot;new_attachments\&quot;>Upload File<\/label><input class=\&quot;form-control mt10\&quot; id=\&quot;checklist_checklist_rows_attributes_${data['id']}_attachments_attributes_new_attachments_caption\&quot; name=\&quot;checklist[checklist_rows_attributes][${data['id']}][attachments_attributes][new_attachments][caption]\&quot; placeholder=\&quot;Caption\&quot; size=\&quot;30\&quot; type=\&quot;text\&quot; /><a href=\&quot;#\&quot; class=\&quot;btn btn-danger attachment-delete mt10\&quot;>Delete<\/a><\/div>', '${data['id']}_add_attachments'); return false;">Add</a>

          </div>
        </div>
      `
    }

    function inputFieldElement(data) {
      if (!data['allow_input']) { return data['value']; }

      switch (data['data_type']) {
        case 'text':
          return textInputField(data);
        case 'dropdown':
          return dropdownInputField(data);
        case 'radio':
          return radioInputField(data);
        case 'checkboxes':
          return checkboxesInputField(data);
        case 'employee':
          return employeeInputField(data);
        case 'airport':
          return airportInputField(data);
        case 'date':
          return dateInputField(data);
        case 'datetime':
          return datetimeInputField(data);
        case 'dropdown-custom':
          return dropdownCustomInputField(data);
        case 'attachment':
          return attachmentInputField(data);
        default:
          console.log('Check if all data type is handled')
      }
    }


    function drawChecklistRowInOnePage() {
      var checklistRowPage = $("#page-view-update-#{@record.id}").find("tr td")

      rows = ''
      checklistData[currentPage].forEach( (data) => {
        header_cell  = data['header']
        content_cell = inputFieldElement(data);
        rows += `
          <tr>
            <td><b>${header_cell}</b></td>
            <td>${content_cell}</td>
          </tr
        `
      })

      nested_table = `
        <table class='table table-bordered table-striped mt10' id='temp'>
          <thead>
            <th>Header</th>
            <th>Content</th>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      `
      checklistRowPage.html(nested_table);

      // TODO: Put the below code in helpers for resuability
      $('.field-date').flatpickr({
        altInput: true,
        altFormat: 'Y-m-d',
        dateFormat: 'Y-m-d',
      });

      $('.field-datetime').flatpickr({
        altInput: true,
        altFormat: 'Y-m-d H:i',
        enableTime: true,
        dateFormat: 'Y-m-d H:i',
        time_24hr: true,
        allowInput: true,
      });


      // -- emp
      $(this).find(".emp_button").each(function(index, item){
        $(item).on("click", function(){
          var field_id = $(this).prop('id');
          $(".emp_modal").show();
          clear_user_table();
          $("#users tbody tr").unbind();
          $("#users tbody tr").on("click", function(){
            
            var target = $(item).parent().parent().find("#emp" + field_id)[0];
            target_page = target.dataset.page;
            target_row = target.dataset.row;

            selected_data = checklistData[target_page].find(element => element['id'] == target_row);

            new_value = $(this).find("td").eq(0).text();
            new_name = $(this).find("td").eq(1).text();

            selected_data['value'] = new_value;
            selected_data['name'] = new_name;

            checklistNewData[target_page] = checklistNewData[target_page] || [];
            target_id = checklistNewData[target_page].findIndex(element => element['id'] == target_row);
            if (target_id != -1) {
              checklistNewData[target_page][target_id] = selected_data;
            } else {
              checklistNewData[target_page].push(selected_data);
            }

            $(item).parent().parent().find("#emp" + field_id).val(new_name);
            $('#emp_div').hide();
            $('.emp_modal').modal('toggle');
          });
          $('.close').on('click',function(){
            $(item).parent().parent().find("#emp"+field_id).val("");
            $('#emp_div').hide();
          });
          build_user_table();
        });
      });

      // -- airport
      $(this).find(".airport_button").each(function(index, item){
        // Get the button that's being clicked
        $(item).on("click", function(){
          // Get the selected airport's field id
          var field_id = $(this).prop("id");
          resetModal(field_id);
          $("#search_btn").html('<button class="btn btn-info" id="search_btn_' + field_id + '">Search</button>');
          $("#search_btn_"+field_id).on("click", {field_id: field_id}, handleSearch);
        });
      });
    }

    function autosave() {
      var newData = '';
      for (var page in checklistNewData) {
        newData += checklistNewData[page].map( function(hash) {
          var tempStr = '';
          var value = hash['value'].replaceAll(";", 'ccc');
          tempStr += `&${hash['id']}=${value}`;

          delete checklistNewData[page];
          return tempStr;
        }).join("&");
      }

      $.ajax({
        type: "POST",
        url: $('form').attr('action'),
        data: $('form').serialize() + "&autosave=true&"+ newData,
        dataType: "json"
      });
    }

    runAutosave = setInterval(autosave, 150000);
    setInterval(function() {
      autoSaveText.style.visibility = (autoSaveText.style.visibility == 'hidden' ? '' : 'hidden');
    }, 1000);

    $(window).on('beforeunload', function(){
      clearInterval(runAutosave)
      return true;
    });

    $('#checklist_submit').on("click", function(event){
      if (Object.keys(checklistNewData).length != 0) {
        $('#checklist_page_view_checklist')[0].value = JSON.stringify(checklistNewData);
      }
    });

    $(document).on("submit", "form", function(event){
        // disable unload warning
        $(window).off('beforeunload');
    });

  })
